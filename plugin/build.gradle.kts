/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/custom_plugins.html
 * This project uses @Incubating APIs which are subject to change.
 */

@file:Suppress("UnstableApiUsage")

import nu.studer.gradle.credentials.domain.CredentialsContainer
import org.jetbrains.dokka.DokkaConfiguration
import org.jetbrains.dokka.base.DokkaBase
import org.jetbrains.dokka.base.DokkaBaseConfiguration
import org.jetbrains.dokka.gradle.DokkaTask
import java.time.Instant

val credentials: CredentialsContainer by project.extra

buildscript {
  dependencies {
    classpath("org.jetbrains.dokka:dokka-base:1.9.20")
  }
}

//
// Plugins
//
plugins {
  `java-gradle-plugin`
  signing
  id("org.jetbrains.kotlin.jvm") version "1.9.24"
  id("com.github.ben-manes.versions") version "0.51.0"
  id("org.jmailen.kotlinter") version "4.0.0"
  id("nu.studer.credentials") version "3.0"
  id("com.gradle.plugin-publish") version "1.2.1"
}

//
// Repositories for Plugin Dependencies
//
repositories {
  mavenCentral()
//  mavenLocal()
}

//
// Plugin Dependencies
//
dependencies {
  implementation(group = "ca.ewert-technologies.notarytoolkotlin", name = "notarytool-kotlin", "0.2.1")

  // Testing
  testImplementation(gradleTestKit())
  testImplementation(group = "org.junit.jupiter", name = "junit-jupiter", version = "5.10.2")
  testImplementation(group = "com.willowtreeapps.assertk", name = "assertk", version = "0.28.1")
}

//
// Apply a specific Java toolchain to ease working on different environments.
//
java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(11))
    vendor.set(JvmVendorSpec.ADOPTIUM)
  }
}

kotlin {
  jvmToolchain {
    this.languageVersion.set(JavaLanguageVersion.of(11))
  }
}

//
// Set up various Properties and Constants used by the build scr
//

// Application Properties
val longName: String by project
val author: String by project
val projectUrl: String by project
val authorEmail: String by project
val company: String by project
val companyUrl: String by project
val group: String by project
val createdYear: String by project
val copyrightYear: String by project

//
// Set up jar metadata
//
tasks.jar {
  manifest {
    attributes["Project"] = project.name
    attributes["Built-By"] = company
    attributes["Version"] = version
    attributes["Build-Timestamp"] = Instant.now().toString()
    attributes["Created-By"] = "Gradle ${gradle.gradleVersion}"
    attributes["Build-Toolchain"] = "Java ${java.toolchain.languageVersion.get()} (${java.toolchain.vendor.get()})"
  }
}

//
// Configure ktlint
//
kotlinter {
  reporters = arrayOf("html", "json")
}

/**
 * Displays general build info, such as versions, key directory locations, etc.
 */
tasks.register("buildInfo") {
  group = "help"
  description = "Displays general build info, such as versions, etc."

  logger.quiet("--- Project Info -----------------------------")
  logger.quiet("Project: ${project.name} - ${project.description}")
  logger.quiet("Project version: ${project.version}")
  logger.quiet("Group:  ${project.group}")
  logger.quiet("Author: $author")
  logger.quiet("Company: $company")
  logger.quiet("--- Environment Info --------------------------")
  logger.quiet("Gradle Version: ${gradle.gradleVersion}")
  logger.quiet("Java Toolchain: Version ${java.toolchain.languageVersion.get()} (${java.toolchain.vendor.get()})")
  logger.quiet("Java Version: ${System.getProperty("java.version")}")
  logger.quiet("JRE Arch: ${System.getProperty("os.arch")}")
  logger.quiet("Java Home: ${System.getProperty("java.home")}")
  logger.quiet("Java Vendor: ${System.getProperty("java.vendor")}")
  logger.quiet("Java Vendor Version: ${System.getProperty("java.vendor.version")}")
  logger.quiet("Operating System: ${System.getProperty("os.name")}, version: ${System.getProperty("os.version")}")
  logger.quiet("build dir: ${project.layout.buildDirectory.asFile.get()}")
}

//
// Configure Testing
//
tasks.named<Test>("test") {
  useJUnitPlatform()
}

testing {
  suites {
    // Configure the built-in test suite
    val test by getting(JvmTestSuite::class) {
    }

    // Create a new test suite
    val functionalTest by registering(JvmTestSuite::class) {

      dependencies {
        // functionalTest test suite depends on the production code in tests
        implementation(project())
        implementation("com.willowtreeapps.assertk:assertk:0.28.1")
      }

      targets {
        all {
          // This test suite should run after the built-in test suite has run its tests
          testTask.configure { shouldRunAfter(test) }
        }
      }
    }
  }
}

gradlePlugin.testSourceSets.add(sourceSets["functionalTest"])

tasks.named<Task>("check") {
  // Include functionalTest as part of the check lifecycle
  dependsOn(testing.suites.named("functionalTest"))
}

//
// Configure Dokka
//
/**
 * Generates Dokka Documentation in html format for public items
 */
tasks.register<DokkaTask>("dokkaHtmlPublic") {
  group = "documentation"
  description = "Generates Dokka Documentation in 'html' format for public items"

  pluginConfiguration<DokkaBase, DokkaBaseConfiguration> {
    footerMessage = "(c) $copyrightYear Ewert Technologies"
  }

  dokkaSourceSets {
    configureEach {
      documentedVisibilities.set(
        setOf(
          DokkaConfiguration.Visibility.PUBLIC,
        )
      )
      jdkVersion.set(11)
    }
  }
}

//
// Set up plugin metadata for Gradle Plugin Portal
//
gradlePlugin {
  website.set(projectUrl)
  vcsUrl.set(projectUrl)
  plugins {
    create(project.name) {
      id = project.group.toString()
      displayName = longName
      description = project.description
      tags = listOf("deployment", "notarytool", "apple", "macOS")
      implementationClass = "ca.ewert.notarytool.gradle.NotarytoolGradlePlugin"
    }
  }
}

//
// Configure Publishing information, used to publish to local
//
publishing {
  repositories {
    mavenLocal()
  }
}

