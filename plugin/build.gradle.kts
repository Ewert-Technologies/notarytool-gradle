/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/custom_plugins.html
 * This project uses @Incubating APIs which are subject to change.
 */

@file:Suppress("UnstableApiUsage")

//
// Plugins
//
plugins {
  `java-gradle-plugin`
  `maven-publish`
  id("org.jetbrains.kotlin.jvm") version "1.9.0"
  id("com.github.ben-manes.versions") version "0.47.0"
  id("org.jmailen.kotlinter") version "3.15.0"
}

//
// Repositories for Plugin Dependencies
//
repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

//
// Plugin Dependencies
//
dependencies {

  // Testing
//  testImplementation(group = "org.junit.jupiter", name = "junit-jupiter", version = "5.9.3")
  testImplementation(group = "com.willowtreeapps.assertk", name = "assertk", version = "0.26.1")
}

//
// Configure Testing
//
//tasks.named<Test>("test") {
//  useJUnitPlatform()
//}

//
// Set up plugin metadata
//
gradlePlugin {

  website.set("https://www.ewert-technologies.ca")
  vcsUrl.set("https://www.ewert-technologies.ca")

  // Define the plugin
  plugins {
    create("notarytool-gradle") {
      id = project.group.toString()
      displayName = "Notarytool Gradle"
      description = project.description
      tags.set(listOf("deployment", "notarytool", "apple"))
      implementationClass = "ca.ewert.notarytool.gradle.NotarytoolGradlePlugin"
    }
  }
}

/**
 * Displays general build info, such as versions, key directory locations, etc.
 */
tasks.register("buildInfo") {
  group = "help"
  description = "Displays general build info, such as versions, etc."

  logger.quiet("Project: ${project.name} - ${project.description}")
  logger.quiet("Project version: ${project.version}")
  logger.quiet("Group:  ${project.group}")
//  logger.quiet("Author: $author")
//  logger.quiet("Company: $company")
  logger.quiet("Gradle Version: ${gradle.gradleVersion}")
//  logger.quiet("Java Toolchain: Version ${java.toolchain.languageVersion.get()} (${java.toolchain.vendor.get()})")
  logger.quiet("build dir: ${project.buildDir}")
}



testing {
  suites {
    // Configure the built-in test suite
    val test by getting(JvmTestSuite::class) {
      // Use Kotlin Test test framework
      useKotlinTest("1.8.10")
    }

    // Create a new test suite
    val functionalTest by registering(JvmTestSuite::class) {
      // Use Kotlin Test test framework
      useKotlinTest("1.8.10")

      dependencies {
        // functionalTest test suite depends on the production code in tests
        implementation(project())
      }

      targets {
        all {
          // This test suite should run after the built-in test suite has run its tests
          testTask.configure { shouldRunAfter(test) }
        }
      }
    }
  }
}

gradlePlugin.testSourceSets.add(sourceSets["functionalTest"])

tasks.named<Task>("check") {
  // Include functionalTest as part of the check lifecycle
  dependsOn(testing.suites.named("functionalTest"))
}
